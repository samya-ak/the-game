package controller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"log"
	"thegame/graph"
	"thegame/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	log.Println("Creating a new USER")
	return r.UserService.Create(ctx, input)
}

// UpdateGameState is the resolver for the updateGameState field.
func (r *mutationResolver) UpdateGameState(ctx context.Context, input model.UserGameState) (*model.GameState, error) {
	log.Println("Updating user's game state")
	return r.UserService.UpdateGameState(ctx, &input)
}

// AddFriends is the resolver for the addFriends field.
func (r *mutationResolver) AddFriends(ctx context.Context, userID string, input []string) ([]*model.Friend, error) {
	log.Println("Adding friends")
	return r.UserService.AddFriends(ctx, userID, input)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	log.Println("Getting all users")
	return r.UserService.GetAll(ctx)
}

// GetGameState is the resolver for the getGameState field.
func (r *queryResolver) GetGameState(ctx context.Context, userID string) (*model.GameState, error) {
	log.Println("Getting user's game state")
	return r.UserService.GetGameState(ctx, userID)
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context, userID string) ([]*model.Friend, error) {
	log.Println("Getting friends")
	return r.UserService.GetFriends(ctx, userID)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
